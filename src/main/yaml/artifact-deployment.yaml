---
apiVersion: v1
data:
  deploy.js: "//    Copyright 2018 Tremolo Security, Inc.\n// \n//    Licensed under\
    \ the Apache License, Version 2.0 (the \"License\");\n//    you may not use this\
    \ file except in compliance with the License.\n//    You may obtain a copy of\
    \ the License at\n// \n//        http://www.apache.org/licenses/LICENSE-2.0\n\
    // \n//    Unless required by applicable law or agreed to in writing, software\n\
    //    distributed under the License is distributed on an \"AS IS\" BASIS,\n//\
    \    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
    //    See the License for the specific language governing permissions and\n//\
    \    limitations under the License.\n\nprint(\"Loading CertUtils\");\nvar CertUtils\
    \ = Java.type(\"com.tremolosecurity.kubernetes.artifacts.util.CertUtils\");\n\n\
    print(\"Creating openunison keystore\");\n\nksPassword = inProp['unisonKeystorePassword'];\n\
    ouKs = Java.type(\"java.security.KeyStore\").getInstance(\"PKCS12\");\nouKs.load(null,ksPassword.toCharArray());\n\
    \nuse_k8s_cm = inProp['USE_K8S_CM'] == \"true\";\n\ninProp['K8S_DB_SECRET'] =\
    \ java.util.UUID.randomUUID().toString();\n\n\n\nprint(\"Generating openunison\
    \ tls certificate\");\ncertInfo = {\n    \"serverName\":\"openunison.openunison.svc.cluster.local\"\
    ,\n    \"ou\":\"kubernetes\",\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n\
    \    \"st\":\"cncf\",\n    \"c\":\"ea\",\n    \"caCert\":false\n}\n\nvar x509data\
    \ = CertUtils.createCertificate(certInfo);\n\nif (use_k8s_cm) {\n  print(\"Creating\
    \ CSR for API server\");\n\n\n\n  csrReq = {\n      \"apiVersion\": \"certificates.k8s.io/v1beta1\"\
    ,\n      \"kind\": \"CertificateSigningRequest\",\n      \"metadata\": {\n   \
    \     \"name\": \"openunison.openunison.svc.cluster.local\",\n      },\n     \
    \ \"spec\": {\n        \"request\": java.util.Base64.getEncoder().encodeToString(CertUtils.generateCSR(x509data).getBytes(\"\
    utf-8\")),\n        \"usages\": [\n          \"digital signature\",\n        \
    \  \"key encipherment\",\n          \"server auth\"\n        ]\n      }\n    };\n\
    \n  print(\"Requesting certificate\");\n  apiResp = k8s.postWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests',JSON.stringify(csrReq));\n\
    \n  if (apiResp.code == 409) {\n    print(\"CertManager is not enabled on this\
    \ cluster.  Change USE_K8S_CM=false in your input.props\");\n    exit(1);\n  }\n\
    \n  print(\"Approving certificate\");\n  approveReq = JSON.parse(apiResp.data);\n\
    \  approveReq.status.conditions = [\n      {\n          \"type\":\"Approved\"\
    ,\n          \"reason\":\"OpenUnison Deployment\",\n          \"message\":\"This\
    \ CSR was approved by the OpenUnison artifact deployment job\"\n      }\n  ];\n\
    \n  apiResp = k8s.putWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/openunison.openunison.svc.cluster.local/approval',JSON.stringify(approveReq));\n\
    \  print(\"Retrieving certificate from API server\");\n  apiResp = k8s.callWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/openunison.openunison.svc.cluster.local');\n\
    \  print(apiResp.data);\n  certResp = JSON.parse(apiResp.data);\n  b64cert = certResp.status.certificate;\n\
    \n  if (b64cert == null || b64cert === \"\") {\n    print(\"CertManager is not\
    \ enabled on this cluster.  Change USE_K8S_CM=false in your input.props\");\n\
    \    exit(1);\n  }\n\n  CertUtils.importSignedCert(x509data,b64cert);\n}\n\nprint(\"\
    Saving certificate to keystore\");\nCertUtils.saveX509ToKeystore(ouKs,ksPassword,\"\
    unison-tls\",x509data);\nCertUtils.createKey(ouKs,\"session-unison\",ksPassword);\n\
    CertUtils.createKey(ouKs,\"lastmile-oidc\",ksPassword);\n\nprint(\"Generating\
    \ OIDC Certificate\");\n\ncertInfo = {\n    \"serverName\":\"unison-saml2-rp-sig\"\
    ,\n    \"ou\":\"kubernetes\",\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n\
    \    \"st\":\"cncf\",\n    \"c\":\"ea\",\n    \"caCert\":false\n}\n\nx509data\
    \ = CertUtils.createCertificate(certInfo);\nCertUtils.saveX509ToKeystore(ouKs,ksPassword,\"\
    unison-saml2-rp-sig\",x509data);\n\nprint(\"Storing k8s and AD certs\");\nouKs.setCertificateEntry('k8s-master',k8s.getCertificate('k8s-master'));\n\
    \nprint(\"Generate Ingress Certificate\");\n\ningressCertInfo = {\n    \"serverName\"\
    : inProp[\"OU_HOST\"],\n    \"ou\":inProp[\"OU_CERT_OU\"],\n    \"o\":inProp[\"\
    OU_CERT_O\"],\n    \"l\":inProp[\"OU_CERT_L\"],\n    \"st\":inProp[\"OU_CERT_ST\"\
    ],\n    \"c\":inProp[\"OU_CERT_C\"],\n    \"caCert\":true,\n    \"subjectAlternativeNames\"\
    :[\n        inProp[\"K8S_DASHBOARD_HOST\"]\n    ]\n}\n\ningressX509data = CertUtils.createCertificate(ingressCertInfo);\n\
    \nprint(\"Import OpenUnison certificate into keystore\");\nouKs.setCertificateEntry('unison-ca',ingressX509data.getCertificate());\n\
    \nprint(\"Importing the dashboard\");\n\n res = k8s.callWS('/api/v1/namespaces/kube-system/pods');\n\
    pods = JSON.parse(res.data);\n\n k8s_db_uri = null;\n\n for (i=0;i<pods.items.length;i++)\
    \ {\n  pod = pods.items[i];\n  if (pod.metadata.name.startsWith(\"kubernetes-dashboard\"\
    )) {\n    k8s_db_uri = pod.metadata.selfLink;\n  }\n}\n\n\n if (k8s_db_uri ==\
    \ null) {\n  print(\"Dashboard not present, deploying\");\n  k8s.kubectlCreateFromURL(\"\
    https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml\"\
    );\n\n   res = k8s.callWS('/api/v1/namespaces/kube-system/pods');\n  pods = JSON.parse(res.data);\n\
    \n\n   for (i=0;i<pods.items.length;i++) {\n    pod = pods.items[i];\n    if (pod.metadata.name.startsWith(\"\
    kubernetes-dashboard\")) {\n      k8s_db_uri = pod.metadata.selfLink;\n    }\n\
    \  }\n} else {\n  print(\"Skipping import of dashboard\");\n}\n\n\n\nprint(\"\
    Generating dashboard tls certificate\");\ndbCertInfo = {\n    \"serverName\":\"\
    kubernetes-dashboard.kube-system.svc.cluster.local\",\n    \"ou\":\"kubernetes\"\
    ,\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n    \"st\":\"cncf\",\n    \"\
    c\":\"ea\",\n    \"caCert\":false\n}\n\ndbX509data = CertUtils.createCertificate(dbCertInfo);\n\
    \nif (use_k8s_cm) {\n  print(\"Creating CSR for API server\");\n\n\n\n  csrReq\
    \ = {\n      \"apiVersion\": \"certificates.k8s.io/v1beta1\",\n      \"kind\"\
    : \"CertificateSigningRequest\",\n      \"metadata\": {\n        \"name\": \"\
    kubernetes-dashboard.kube-system.svc.cluster.local\",\n      },\n      \"spec\"\
    : {\n        \"request\": java.util.Base64.getEncoder().encodeToString(CertUtils.generateCSR(dbX509data).getBytes(\"\
    utf-8\")),\n        \"usages\": [\n          \"digital signature\",\n        \
    \  \"key encipherment\",\n          \"server auth\"\n        ]\n      }\n    };\n\
    \n  print(\"Requesting certificate\");\n  apiResp = k8s.postWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests',JSON.stringify(csrReq));\n\
    \  print(\"Approving certificate\");\n  approveReq = JSON.parse(apiResp.data);\n\
    \  approveReq.status.conditions = [\n      {\n          \"type\":\"Approved\"\
    ,\n          \"reason\":\"OpenUnison Deployment\",\n          \"message\":\"This\
    \ CSR was approved by the OpenUnison artifact deployment job\"\n      }\n  ];\n\
    \n  apiResp = k8s.putWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/kubernetes-dashboard.kube-system.svc.cluster.local/approval',JSON.stringify(approveReq));\n\
    \  print(\"Retrieving certificate from API server\");\n  apiResp = k8s.callWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/kubernetes-dashboard.kube-system.svc.cluster.local','java.util.Base64.getDecoder().decode(JSON.parse(ws_response_json).status.certificate);check_ws_response=true;',10);\n\
    \  print(apiResp.data);\n  certResp = JSON.parse(apiResp.data);\n  b64cert = certResp.status.certificate;\n\
    \  CertUtils.importSignedCert(dbX509data,b64cert);\n} else {\n  //not using k8s\
    \ cm, so just import the dashboard cert into the openunison keystore\n  ouKs.setCertificateEntry(\"\
    trusted-k8s-dasboard\",dbX509data.getCertificate());\n}\nprint(\"Creating dashboard\
    \ secret\");\n\ndbsecret = {\n    \"apiVersion\":\"v1\",\n    \"kind\":\"Secret\"\
    ,\n    \"type\":\"Opaque\",\n    \"metadata\": {\n        \"name\":\"kubernetes-dashboard-certs\"\
    ,\n        \"namespace\":\"kube-system\"\n    },\n    \"data\":{\n        \"dashboard.crt\"\
    : java.util.Base64.getEncoder().encodeToString(CertUtils.exportCert(dbX509data.getCertificate()).getBytes(\"\
    UTF-8\")),\n        \"dashboard.key\": java.util.Base64.getEncoder().encodeToString(CertUtils.exportKey(dbX509data.getKeyData().getPrivate()).getBytes(\"\
    UTF-8\"))\n    }\n};\n\nres = k8s.postWS('/api/v1/namespaces/kube-system/secrets',JSON.stringify(dbsecret));\n\
    \nif (res[\"code\"] == 409) {\n    print(\"Secret alread exists, lets delete then\
    \ recreate\");\n    k8s.deleteWS('/api/v1/namespaces/kube-system/secrets/kubernetes-dashboard-certs');\n\
    \n    print(\"re-creating\");\n    k8s.postWS('/api/v1/namespaces/kube-system/secrets',JSON.stringify(dbsecret));\n\
    }\n\nprint(\"restarting the dashboard\")\n\n print(\"Deleting \" + k8s_db_uri);\n\
    k8s.deleteWS(k8s_db_uri);\n\nprint(\"Create the openunison namespace\");\n\nouNS\
    \ = {\n    \"apiVersion\":\"v1\",\n    \"kind\":\"Namespace\",\n    \"metadata\"\
    :{\n        \"creationTimestamp\":null,\n        \"name\":\"openunison\"\n   \
    \ },\n    \"spec\":{},\n    \"status\":{}\n};\n\nk8s.postWS('/api/v1/namespaces',JSON.stringify(ouNS));\n\
    \nprint(\"Create openunison service account\");\n\nk8s.postWS('/api/v1/namespaces/openunison/serviceaccounts',JSON.stringify({\"\
    apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"creationTimestamp\"\
    :null,\"name\":\"openunison\"}}));\n\n\n\n\nprint(\"Create Ingress TLS Secret\"\
    );\n\ningressSecret = {\n    \"apiVersion\":\"v1\",\n    \"kind\":\"Secret\",\n\
    \    \"type\":\"kubernetes.io/tls\",\n    \"metadata\": {\n        \"name\":\"\
    ou-tls-certificate\",\n        \"namespace\":\"openunison\"\n    },\n    \"data\"\
    :{\n        \"tls.crt\": java.util.Base64.getEncoder().encodeToString(CertUtils.exportCert(ingressX509data.getCertificate()).getBytes(\"\
    UTF-8\")),\n        \"tls.key\": java.util.Base64.getEncoder().encodeToString(CertUtils.exportKey(ingressX509data.getKeyData().getPrivate()).getBytes(\"\
    UTF-8\"))\n    }\n};\n\nk8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(ingressSecret));\n\
    \n\nprint(\"Create OpenUnison Secret\");\n\n\nouSecrets = {\n    \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"Opaque\",\n    \"metadata\"\
    : {\n        \"name\":\"openunison-secrets\",\n        \"namespace\":\"openunison\"\
    \n    },\n    \"data\":{\n      \"openunison.yaml\":\"LS0tCm9wZW5fcG9ydDogODA4MApvcGVuX2V4dGVybmFsX3BvcnQ6IDgwCnNlY3VyZV9wb3J0OiA4NDQzCnNlY3VyZV9leHRlcm5hbF9wb3J0OiA0NDMKc2VjdXJlX2tleV9hbGlhczogInVuaXNvbi10bHMiCmZvcmNlX3RvX3NlY3VyZTogdHJ1ZQphY3RpdmVtcV9kaXI6ICIvdG1wL2FtcSIKcXVhcnR6X2RpcjogIi90bXAvcXVhcnR6IgpjbGllbnRfYXV0aDogbm9uZQphbGxvd2VkX2NsaWVudF9uYW1lczogW10KY2lwaGVyczoKLSBUTFNfUlNBX1dJVEhfUkM0XzEyOF9TSEEKLSBUTFNfUlNBX1dJVEhfQUVTXzEyOF9DQkNfU0hBCi0gVExTX1JTQV9XSVRIX0FFU18yNTZfQ0JDX1NIQQotIFRMU19SU0FfV0lUSF8zREVTX0VERV9DQkNfU0hBCi0gVExTX1JTQV9XSVRIX0FFU18xMjhfQ0JDX1NIQTI1NgotIFRMU19SU0FfV0lUSF9BRVNfMjU2X0NCQ19TSEEyNTYKcGF0aF90b19kZXBsb3ltZW50OiAiL3Vzci9sb2NhbC9vcGVudW5pc29uL3dvcmsiCnBhdGhfdG9fZW52X2ZpbGU6ICIvZXRjL29wZW51bmlzb24vb3UuZW52IgoK\"\
    ,\n      \"ou.env\":k8s.encodeMap(inProp),\n      \"unisonKeyStore.p12\":CertUtils.encodeKeyStore(ouKs,ksPassword)\n\
    \    }\n}\n\nk8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(ouSecrets));\n\
    \nprint(\"Creating post deployment configmap\");\n\noidcFlags = \"--oidc-issuer-url=https://\"\
    \ + inProp[\"OU_HOST\"] + \"/auth/idp/k8sIdp\\n\" +\n            \"--oidc-client-id=kubernetes\\\
    n\" +\n            \"--oidc-username-claim=sub\\n\" + \n            \"--oidc-groups-claim=groups\\\
    n\" +\n            \"--oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem\";\n\nprint(\"\
    Runing kubectl create\");\nk8s.kubectlCreate(k8s.processTemplate(deploymentTemplate,inProp));\n\
    print(\"kubectl complete\");\n\ncfgMap = {\n    \"apiVersion\":\"v1\",\n    \"\
    kind\":\"ConfigMap\",\n    \"metadata\":{\n        \"name\":\"api-server-config\"\
    ,\n        \"namespace\":\"openunison\"\n    },\n    \"data\":{\n        \"oidc-api-server-flags\"\
    :oidcFlags,\n        \"ou-ca.pem-base64-encoded\":CertUtils.exportCert(ingressX509data.getCertificate())\n\
    \        //\"deployment\":java.util.Base64.getEncoder().encodeToString(k8s.processTemplate(deploymentTemplate,inProp).getBytes(\"\
    UTF-8\"))\n    }\n};\n\nk8s.postWS('/api/v1/namespaces/openunison/configmaps',JSON.stringify(cfgMap));\n\
    \nprint(\"Deleting cluster role binding\");\nk8s.deleteWS('/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/artifact-deployment');\n\
    \nprint(\"Artifacts Created, to configure the API server run 'kubectl describe\
    \ configmap api-server-config -n openunison'\");"
  openunison.yaml: "---\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\n\
    metadata:\n  name: users.openunison.tremolo.io\nspec:\n  group: openunison.tremolo.io\n\
    \  versions:\n    - name: v1\n      served: true\n      storage: true\n  version:\
    \ v1\n  scope: Namespaced\n  names:\n    plural: users\n    singular: user\n \
    \   kind: User\n    shortNames:\n    - usr\n  validation:\n   # openAPIV3Schema\
    \ is the schema for validating custom objects.\n    openAPIV3Schema:\n      properties:\n\
    \        spec:\n          properties:\n            sub:\n              type: string\n\
    \            groups:\n              type: array\n              items:\n      \
    \          type: string\n            first_name:\n              type: string\n\
    \            last_name:\n              type: string\n            email:\n    \
    \          type: string\n---\napiVersion: apiextensions.k8s.io/v1beta1\nkind:\
    \ CustomResourceDefinition\nmetadata:\n  name: oidc-sessions.openunison.tremolo.io\n\
    spec:\n  group: openunison.tremolo.io\n  versions:\n    - name: v1\n      served:\
    \ true\n      storage: true\n  version: v1\n  scope: Namespaced\n  names:\n  \
    \  plural: oidc-sessions\n    singular: oidc-session\n    kind: OidcSession\n\
    \    shortNames:\n    - oidc\n  validation:\n   # openAPIV3Schema is the schema\
    \ for validating custom objects.\n    openAPIV3Schema:\n      properties:\n  \
    \      spec:\n          properties:\n            session_id:\n              type:\
    \ string\n            client_id:\n              type: string\n            encrypted_id_token:\n\
    \              type: string\n            encrypted_access_token:\n           \
    \   type: string\n            expires:\n              type: string\n         \
    \   user_dn:\n              type: string\n            refresh_token:\n       \
    \       type: string\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\n\
    metadata:\n  namespace: openunison\n  name: oidc-user-sessions\nrules:\n- apiGroups:\
    \ [\"openunison.tremolo.io\"]\n  resources: [\"oidc-sessions\",\"users\"]\n  verbs:\
    \ [\"*\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\n\
    metadata:\n  name: oidc-user-sessions\n  namespace: openunison\nsubjects:\n- kind:\
    \ ServiceAccount\n  name: openunison\n  namespace: openunison\nroleRef:\n  kind:\
    \ Role\n  name: oidc-user-sessions\n  apiGroup: rbac.authorization.k8s.io\n---\n\
    apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n   \
    \ kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/backend-protocol:\
    \ https\n    nginx.ingress.kubernetes.io/secure-backends: \"true\"\n    nginx.org/ssl-services:\
    \ openunison\n    nginx.ingress.kubernetes.io/affinity: cookie\n    nginx.ingress.kubernetes.io/session-cookie-name:\
    \ INGRESSCOOKIE\n    nginx.ingress.kubernetes.io/session-cookie-hash: sha1\n \
    \ name: openunison-ingress\n  namespace: openunison\nspec:\n  rules:\n  - host:\
    \ #[OU_HOST]\n    http:\n      paths:\n      - backend:\n          serviceName:\
    \ openunison\n          servicePort: 443\n        path: /\n  - host: #[K8S_DASHBOARD_HOST]\n\
    \    http:\n      paths:\n      - backend:\n          serviceName: openunison\n\
    \          servicePort: 443\n        path: /\n  tls:\n  - hosts:\n    - #[OU_HOST]\n\
    \    - #[K8S_DASHBOARD_HOST]\n    secretName: ou-tls-certificate\nstatus:\n  loadBalancer:\
    \ {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: openunison\n\
    \  name: openunison\n  namespace: openunison\nspec:\n  ports:\n  - name: openunison-secure\n\
    \    port: 443\n    protocol: TCP\n    targetPort: 8443\n  - name: openunison-insecure\n\
    \    port: 80\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app:\
    \ openunison\n  sessionAffinity: ClientIP\n  sessionAffinityConfig:\n    clientIP:\n\
    \      timeoutSeconds: 10800\n  type: ClusterIP\nstatus:\n  loadBalancer: {}\n\
    ---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\
    \    app: openunison\n  name: openunison\n  namespace: openunison\nspec:\n  progressDeadlineSeconds:\
    \ 600\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n\
    \      app: openunison\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n\
    \      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n\
    \      creationTimestamp: null\n      labels:\n        app: openunison\n    spec:\n\
    \      containers:\n      - env:\n        - name: JAVA_OPTS\n          value:\
    \ -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\n         \
    \   -DunisonEnvironmentFile=/etc/openunison/ou.env\n        - name: fortriggerupdates\n\
    \          value: changeme\n        image: docker.io/tremolosecurity/openunison-k8s-login-oidc\n\
    \        imagePullPolicy: Always\n        livenessProbe:\n          exec:\n  \
    \          command:\n            - /usr/local/openunison/bin/check_alive.py\n\
    \          failureThreshold: 10\n          initialDelaySeconds: 120\n        \
    \  periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds:\
    \ 10\n        name: openunison\n        ports:\n        - containerPort: 8080\n\
    \          name: http\n          protocol: TCP\n        - containerPort: 8443\n\
    \          name: https\n          protocol: TCP\n        readinessProbe:\n   \
    \       exec:\n            command:\n            - /usr/local/openunison/bin/check_alive.py\n\
    \            - https://127.0.0.1:8443/auth/idp/k8sIdp/.well-known/openid-configuration\n\
    \            - issuer\n          failureThreshold: 3\n          initialDelaySeconds:\
    \ 30\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds:\
    \ 10\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n\
    \        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath:\
    \ /etc/openunison\n          name: secret-volume\n          readOnly: true\n \
    \     dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      terminationGracePeriodSeconds:\
    \ 30\n      serviceAccount: openunison\n      volumes:\n      - name: secret-volume\n\
    \        secret:\n          defaultMode: 420\n          secretName: openunison-secrets\n"
kind: ConfigMap
metadata:
  name: deployment-scripts
  namespace: openunison-deploy
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: artifact-deployment
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  namespace: openunison-deploy
  name: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: artifact-deployment
  namespace: openunison-deploy
spec:
  template:
    spec:
      containers:
      - name: artifact-deployment
        image: docker.io/tremolosecurity/kubernetes-artifact-deployment:latest
        command: ["java", "-jar", "/usr/local/artifactdeploy/artifact-deploy.jar",  "-extraCertsPath","/etc/extracerts","-installScriptURL", "file:///etc/input-maps/deploy.js","-kubernetesURL","https://kubernetes.default.svc.cluster.local","-rootCaPath","/var/run/secrets/kubernetes.io/serviceaccount/ca.crt","-secretsPath","/etc/secrets/input.props","-tokenPath","/var/run/secrets/kubernetes.io/serviceaccount/token","-deploymentTemplate","file:///etc/input-maps/openunison.yaml"]
        volumeMounts:
          - name: secrets-dir
            mountPath: "/etc/secrets"
            readOnly: true
          - name: extra-certs-dir
            mountPath: "/etc/extracerts"
            readOnly: true
          - name: input-maps
            mountPath: "/etc/input-maps"
            readOnly: true 
      restartPolicy: Never
      volumes:
        - name : secrets-dir
          secret:
            secretName: input
        - name : extra-certs-dir
          configMap:
            name: extracerts
        - name: input-maps
          configMap:
            name: deployment-scripts
  backoffLimit: 1